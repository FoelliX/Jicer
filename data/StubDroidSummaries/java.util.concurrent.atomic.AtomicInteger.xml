<?xml version="1.0" ?>
<summary fileFormatVersion="101">
	<methods>
		<method id="void &lt;init&gt;(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="0" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
		<method id="int addAndGet(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="1" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int compareAndSet(int,int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="1" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
		<method id="int decrementAndGet()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="double doubleValue()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="float floatValue()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int get()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int getAndAdd(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="0" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
		<method id="int getAndDecrement()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int getAndIncrement()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int getAndSet(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="0" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
		<method id="int incrementAndGet()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="int intValue()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="void lazySet(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="long longValue()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="void set(int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="0" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
		<method id="java.lang.String toString()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="boolean weakCompareAndSet(int,int)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter" ParameterIndex="1" />
					<to sourceSinkType="Field"
						AccessPath="[java.util.concurrent.atomic.AtomicInteger: int value]"
						AccessPathTypes="[int]" />
				</flow>
			</flows>
		</method>
	</methods>
</summary>